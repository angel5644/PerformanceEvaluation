@model PES.ViewModels.PerformanceFilesPartial
@using PES.Models 
@using PES.ViewModels
@using PES.Services
@{
    ViewBag.Title = "Performance Files";
    var currentUser = ViewBag.currentEmployee;
}

<div class="row text-center">
    <div class="col-md-12">
        <h2>Performance Files</h2>
    </div>
</div>
<hr />
<div class="row">
    <div class="col-md-12">
        <div id="performancePartial">
            @Html.Partial("_PerformanceFilesPartial", Model)
        </div>

        <div class="form-horizontal">
            <div class="form-group">
                <div class="col-md-offset-5 col-md-7">
                    <input id="submitFilesChanges" type="button" value="Save Changes" class="btn btn-primary" />
    </div>
</div>
        </div>
    </div>
</div>


@section Styles
{
    @Styles.Render("~/Content/datatables/dataTables.bootstrap.min.css")
    @Styles.Render("~/Content/ExportDataTables/buttons.dataTables.min.css")
}


@section Scripts
{
    @Scripts.Render("~/Scripts/jquery.dataTables.min.js")
    @Scripts.Render("~/Scripts/dataTables.bootstrap.min.js")
    @Scripts.Render("~/Scripts/ExportDataTables/dataTables.buttons.min.js")
    @Scripts.Render("~/Scripts/ExportDataTables/jszip.min.js")
    @Scripts.Render("~/Scripts/ExportDataTables/pdfmake.min.js")
    @Scripts.Render("~/Scripts/ExportDataTables/vfs_fonts.js")
    @Scripts.Render("~/Scripts/ExportDataTables/buttons.html5.min.js")
    @Scripts.Render("~/Scripts/utilities.js")

    <script type="text/javascript">
        var listPerformances = [];

        $(document).ready(function () {
            var tableOptions = {
                dom: '<"row"<"col-md-12"B>><"row"<"col-md-6"l><"col-md-6"f>>rtip',
                buttons: [
                    'excel', 'pdf'],
                lengthMenu: [[25, 50, 100, -1], [25, 50, 100, "All"]],
                pageLength: 25
            });
        });
        // This extracts the value from the checkboxes
        function renderColumn(value, column, row, iDataIndex) {
            if ($(value).find()) {
                return $(value).find().prop('checked');
            }
            return value;
        }

        function calculate(performanceId, element) {
            // total1 
            var total1 = $("#total1" + performanceId).text();
            var rank = $(element).val();
            var t1Rank = total1 * rank;

            // Assign new value to t1Rank
            $("#t1Rank" + performanceId).text(t1Rank);

            // --[ Add performance to be eddited          
            var exists = false;
            if (listPerformances && listPerformances.length > 0) {
                // Get performance ids
                var ids = listPerformances.map(function (p) {
                    return p.performanceId;
                });

                // Check if already exists
                exists = ids.indexOf(performanceId) != -1;

                // If already exists
                if (exists)
                {
                    // Get index of value to update
                    var index = ids.indexOf(performanceId);
                    // Update value
                    listPerformances[index].rankValue = rank;
                }
            }

            // If does not exist yet
            if (!exists) {
                // Create new performance to be updated
                var intId = parseInt(performanceId);
                var doubleRank = parseFloat(rank);
                var newPerformance = new PerformanceRankHelper(intId, doubleRank);
                // Add to the list
                listPerformances.push(newPerformance);
            }
            // --]
        }
    </script>
  
}

   
